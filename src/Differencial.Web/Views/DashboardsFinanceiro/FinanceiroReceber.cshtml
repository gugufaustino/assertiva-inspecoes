@model IEnumerable<FinanceiroReceberDto>
@{
	ViewBag.Title = "Financeiro a Receber";


	var actionLink = new IHtmlContent[] {
			Html.DropDownList("competenciaMes", (SelectList)(ViewData["competenciaMes"] ?? new List<SelectListItem>()), new { @class = "select-competenciaMes form-control font-bold input-sm" })
		};

	var actionLinkRi = new HtmlString[] {
			HtmlBotaoHelper.Botao("Faturar", "btnFaturar", btnClass: "btn-success btn-sm", spanClass: "fa fa-pencil"),
			HtmlBotaoHelper.Botao("Liquidar", "btnLiquidar", btnClass: "btn-success btn-sm", spanClass: "fa fa-pencil"),
			HtmlBotaoHelper.Botao("Visualizar", "btnVisualizar", btnClass: "btn-white btn-sm", spanClass: "fa fa-file-text")
		};


}
@using (Html.BeginPageHeading("Lista", @Html.ActionLink("Início", "Inicio", "Home"))) { }
<div class="wrapper wrapper-content">
	<div class="row">
		@using (Html.BeginBox(titulo: "Competência:", actionsLeft: actionLink, actionsRight: actionLinkRi))
		{

			<div class="row">
				<div class="table-responsive">
					<table id="tbFinanceiroSolicVistoria" class="grid-dataTables display table table-striped table-bordered table-hover">
						<thead>
							<tr>
								<th></th>
								<th class="">Seguradora</th>
								<th class="w180px">Tipo Situação</th>
								<th class="w130px">Valor Total</th>
								<th class="w130px">Faturado</th>
								<th class="w130px">Liquidado</th>
							</tr>
						</thead>

						<tbody>
							<tr>
								<td></td>
								<td>
								</td>

								<td class="text-center">
								</td>

								<td class="text-right">
								</td>
								<td class="text-center">
									<span class="label label-success"></span>
								</td>
								<td class="text-center">
									<span class="label label-warning"></span>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		}
	</div>
</div>

@section scripts {
	<script type="text/javascript">
		var grideTodasSolic
		document.addEventListener("DOMContentLoaded", function () {

			grideTodasSolic = $('#tbFinanceiroSolicVistoria').Gride({
				bSelecionavel: true,
				bfiltroColuna: true,
				order: [[1, 'desc']],
				autoWidth: false,
				columns: [
					{ data: "0" },
					{ data: "NomeSeguradora", "className": "" },
					{ data: "NomeSituacao", "className": "text-center" },
					{ data: "ValorTotal", "className": "text-right", type: 'date-euro' },
					{ data: "IndFaturado", "className": "text-center" },
					{ data: "IndLiquidado", "className": "text-center" },
				],
				mapJsonParaObjeto: function (obj) {
					return {
						"0": "",
						NomeSeguradora: obj.NomeSeguradora,
						TpSituacao: obj.TpSituacao,
						NomeSituacao: "Enviado Para Financeiro",
						ValorTotal: obj.ValorLancamentoFinanceiro,
						IndFaturado: indPendenteConcluido(obj.IndFaturado),
						IndLiquidado: indPendenteConcluido(obj.IndLiquidado),
						DT_RowId: obj.Id
					}
				}
			});




			$("#btnVisualizar").click(function () {

				var arrSel = grideTodasSolic.rows({ selected: true }).ids().toArray();

				if (arrSel.length == 1) {
					loadModal("/Dashboards/FinanceiroReceber/ReceberLancamentos?id=" + arrSel[0] + "&mesano=" + $("#competenciaMes").val(), "modal-xl");
				} else if (arrSel.length == 0) {
					alertaMensagem("Selecione um item da lista");
				} else {
					alertaMensagem("Selecione apenas um item da lista");
				}
			});

			$("#btnFaturar").click(function () {
				var arrSel = grideTodasSolic.rows({ selected: true }).ids().toArray();

				if (arrSel.length < 1)
					alertaMensagem("Selecione ao menos um item da lista");

				$.post("/Dashboards/FinanceiroReceber/Faturar", { Id: arrSel, mesano: $("#competenciaMes").val() }, function (data) {
					alertaResponseResult(data);
					if (data.success) {
						load($("#competenciaMes").val());
					}
					esconderCarregando();
				});

			}); 

			$("#btnLiquidar").click(function () {
				var arrSel = grideTodasSolic.rows({ selected: true }).ids().toArray();

				if (arrSel.length < 1)
					alertaMensagem("Selecione ao menos um item da lista");

				$.post("/Dashboards/FinanceiroReceber/Liquidar", { Id: arrSel, mesano: $("#competenciaMes").val() }, function (data) {
					alertaResponseResult(data);
					if (data.success) {
						load($("#competenciaMes").val());
					}
					esconderCarregando();
				});

			}); 


			$("#competenciaMes").change(function () {
				load($(this).val())
			});

			function load(competenciaMes) {

				$.post("/Dashboards/FinanceiroReceber/ListarDadosFinanceiroReceber", { mesano: competenciaMes }, function (data) {
					grideTodasSolic.atualizarDados(data.content);
				});
			}

			load($("#competenciaMes").val());




		});

		function indPendenteConcluido(indicador, dthConcluido = null) {
			let classSpan, tpSituacao;

			if (indicador) {
				tpSituacao = "Concluído";
				classSpan = "label-primary";
			} else {
				classSpan = "label-warning";
				tpSituacao = "Pendente";
			}

			let html = `<span class="label ${classSpan}">${tpSituacao}</span><br />`;

			if (dthConcluido) {
				// Formata a data se disponível
				let dataFormatada = formatoDataHora(dthConcluido);
				html += `<small class="text-nowrap">${dataFormatada}</small>`;
			}

			return html;
		}

		// Função auxiliar para formatar a data e hora (equivalente ao FormatoDataHora no C#)
		function formatoDataHora(data) {
			let dataObj = new Date(data);
			return dataObj.toLocaleString(); // Isso vai formatar a data no formato local do navegador
		}
		/* atualiza apenas a linha selecionada
		var roww = grideTodasSolic.rows({ selected: true }).data()[0];
		roww[3] = "the lorem"
		var rIndex = grideTodasSolic.rows({ selected: true })[0][0]
		grideTodasSolic.row(rIndex).data(roww).draw()
		*/

	</script>
}
 